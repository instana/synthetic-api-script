#!/usr/bin/env node
const path = require("path");
const fs = require("fs");

const { executeScript } = require("../lib/executeScript");
const { base64Content, file2String, isFolder } = require("../lib/helpers");
const pkg = require("../package.json");

var args = process.argv.slice(2);

const options = {
  convert: false,
  dir: undefined,
  zipDir: undefined,
};

const helpMessage =
  "Usage:\n" +
  "  Run api script in local\n" +
  "\n" +
  "Commands\n" +
  "  script-cli [options] <script-name>\n" +
  "\n" +
  "Options\n" +
  "  -d <directory> directory for bundle scripts\n" +
  "  -s convert script to string\n" +
  "  -z <bundle-script-folder> <entry-script> convert bundle script to string encoded with base64\n" +
  "  -c secure.json specify credentials in API script\n" +
  "  -h, --help show help\n" +
  "  -v, --version show version\n" +
  "\n" +
  "Examples:\n" +
  "1. run a single script\n" +
  "  script-cli examples/example1.js\n" +
  "  # using credentials\n" +
  "  script-cli -c creds.json examples/got-example1.js\n" +
  "2. run bundle scripts\n" +
  "  script-cli -d examples/got-bundle-example1 index.js\n" +
  "  # using credentials\n" +
  "  script-cli -c creds.json -d examples/got-bundle-example1 index.js\n" +
  "3. convert a script to string\n" +
  "  script-cli -s examples/http-get.js\n" +
  "4. convert bundle script to string encoded with base64\n" +
  "  cd examples\n" +
  "  script-cli -z got-bundle-example1 got-bundle-example1/index.js\n" +
  "\n";

var argv = require("yargs/yargs")(process.argv.slice(2)).usage(
  helpMessage
).argv;

var scriptName = "";
var credentialsFile = undefined;
function help() {
  process.stdout.write(helpMessage);
}

function error(msg) {
  process.stderr.write("Error " + msg + "\n");
  process.exit(1);
}

function isArg(arg) {
  return args.some(function (str) {
    return str === arg;
  });
}

if (process.argv.length < 3) {
  help();
  return;
} else {
  scriptName = args[args.length - 1];
}

if (
  !isArg("--help") &&
  !isArg("-h") &&
  !isArg("-s") &&
  !isArg("-d") &&
  !isArg("-z") &&
  !isArg("-c") &&
  !isArg("-v") &&
  !isArg("--version")
) {
  if (process.argv.length >= 3 && process.argv[2].startsWith("-") === true)
    error("Unknown options: " + args);
}

if (argv.h || argv.help) {
  help();
  return;
}
else if (argv.v || argv.version) {
  process.stdout.write("script-cli version: " + pkg.version + "\n");
  return;
}
// compress
else if (argv.s) {
  options.convert = true;
  scriptName = argv.s;
} else if (argv.d) {
  options.dir = argv.d;
  scriptName = argv._[0];
} else if (argv.z) {
  options.zipDir = argv.z;
  scriptName = argv._[0];
} else {
  if (argv._ && argv._.length === 1) {
    scriptName = argv._[0];
  }
  // if(!argv.c)
  //   error('Unknown options: ' + args);
}

// both bundle and api script support credentials
if (argv.c) {
  credentialsFile = argv.c;
  options.secure = JSON.parse(
    fs.readFileSync(credentialsFile, { encoding: "utf-8" })
  );
}

if (options.convert) {
  let result = file2String(scriptName, path.resolve(scriptName));
  process.stdout.write(result + "\n");
} else {
  if (options.dir) {
    // for script bundle
    const path1 = path.resolve(path.join(options.dir, scriptName));
    if(!fs.existsSync(path1)){
      console.error(`"${path1}" does not exist\nscript file is not correct, check file path "${scriptName}"`);
      process.exit(-1)
    }
    executeScript(
      fs.readFileSync(path1),
      // path.resolve(options.dir) + "/myscript.js",
      path1,
      options.dir,
      options
    );
  } else if (options.zipDir) {
    const base64String = base64Content(options.zipDir, scriptName);
    process.stdout.write(base64String + "\n");
  } else {
    // single script
    const path1 = path.resolve(scriptName);
    if (isFolder(path1)) {
      console.error(`${scriptName} is a folder, it should be a file here`);
      return;
    }
    executeScript(fs.readFileSync(path1), null, null, options);
  }
}
